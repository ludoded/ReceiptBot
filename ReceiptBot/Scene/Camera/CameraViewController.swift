//
//  CameraViewController.swift
//  ReceiptBot
//
//  Created by Haik Ampardjian on 4/13/17.
//  Copyright (c) 2017 receiptbot. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import IPDFCameraViewController

class CameraViewController: UIViewController, Errorable {
    var router: CameraRouter!
    
    var takenPhoto: UIImage!
    
    @IBOutlet weak var cameraView: IPDFCameraViewController!
    
    @IBAction func capture(_ sender: UIButton) {
        cameraView.captureImage { [weak self] (imageFilePath) in
            DispatchQueue.main.async {
                guard let image = imageFilePath as? UIImage else { self?.show(type: .error(message: "Can't take the picture")); return }
                self?.takenPhoto = image
                self?.displayVerify()
            }
        }
    }
    
    @IBAction func close(_ sender: UIButton) {
        navigationController?.popViewController(animated: true)
    }
    
    // MARK: - Object lifecycle
    override func awakeFromNib() {
        super.awakeFromNib()
        CameraConfigurator.sharedInstance.configure(viewController: self)
    }

    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        cameraSetup()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.navigationBar.isHidden = true
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        cameraView.start()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        navigationController?.navigationBar.isHidden = false
        cameraView.stop()
    }

    // MARK: - Event handling
    func cameraSetup() {
        cameraView.setupCameraView()
        cameraView.cameraViewType = .normal
        cameraView.isBorderDetectionEnabled = UserDefaults.standard.bool(forKey: "SettingsCropEnabled")
    }

    // MARK: - Display logic
    func displayVerify() {
        router.navigateToPhotoVerify()
    }
}
