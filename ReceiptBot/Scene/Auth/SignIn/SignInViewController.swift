//
//  SignInViewController.swift
//  ReceiptBot
//
//  Created by Haik Ampardjian on 4/8/17.
//  Copyright (c) 2017 receiptbot. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import GoogleSignIn
import Material
import MBProgressHUD
import RxSwift
import RxCocoa

protocol SignInViewControllerOutput {
    var completeProfileInfo: SignIn.CompleteProfileInfo! { get set }
    
    func tryToLogin(request: SignIn.Login.Request)
    func tryToSignUp(request: SignIn.Google.Request)
}

class SignInViewController: EmailPasswordViewController {
    fileprivate var spinner: MBProgressHUD?
    var output: (SignInViewControllerOutput & PasswordRecoveryViewControllerOutput)!
    var router: SignInRouter!
    
    deinit {
        GoogleAuthConfigurator.shared.signedIn = nil
    }
    
    @IBOutlet weak var signStack: UIStackView!
    
    @IBAction func login(_ sender: Button) {
        tryToLogin()
    }
    
    @IBAction func forgotPassword(_ sender: UIButton) {
        recoverPassword()
    }
    
    @IBAction func openSignUp(_ sender: UIButton) {
        router.navigateToSignUp()
    }
    
    // MARK: - Object lifecycle

    override func awakeFromNib() {
        super.awakeFromNib()
        SignInConfigurator.sharedInstance.configure(viewController: self)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupGoogleButton()
    }

    // MARK: - Event handling

    func tryToLogin() {
        let request = SignIn.Login.Request(email: textFields?[0].text,
                                           password: textFields?[1].text)
        output.tryToLogin(request: request)
        
        startSpinning()
    }
    
    func recoverPassword() {
        let request = PasswordRecoveryModel.Request(email: textFields![0].text ?? "")
        output.recoveryPassword(request: request)
        
        startSpinning()
    }

    // MARK: - Display logic
    
    func displayMain() {
        router.displayMain()
    }
    
    func displayCompleteProfile() {
        router.navigateToCompleteProfile()
    }
}

extension SignInViewController: GIDSignInUIDelegate {
    func setupGoogleButton() {
        GIDSignIn.sharedInstance().uiDelegate = self
        
        let googleButton = GIDSignInButton()
        googleButton.style = .standard
        signStack.addArrangedSubview(googleButton)
        
        /// Observe google sign in
        GoogleAuthConfigurator.shared.signedIn = { [weak self] email, error in self?.googleSignIn(with: email, or: error) }
    }
    
    func googleSignIn(with authInfo: GoogleAuthInfo?, or error: String?) {
        /// Sign out, because we don't need the system being signed in, we don't use the privilege of it
        GoogleAuthConfigurator.shared.logout()
        
        /// Show error if one is occured
        guard error == nil else { show(type: .error(message: error!)); return }
        
        startSpinning()
        
        let request = SignIn.Google.Request(email: authInfo!.email, name: authInfo!.name)
        output.tryToSignUp(request: request)
    }
}
