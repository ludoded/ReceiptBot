//
//  DetailInvoicePresenter.swift
//  ReceiptBot
//
//  Created by Haik Ampardjian on 4/13/17.
//  Copyright (c) 2017 receiptbot. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import Kingfisher

protocol DetailInvoicePresenterOutput: class, Errorable, Spinnable {
    func displayInitial(viewModel: DetailInvoice.Setup.ViewModel)
}

class DetailInvoicePresenter {
    weak var output: DetailInvoicePresenterOutput!

    // MARK: - Presentation logic
    func presentInitialSetup(response: DetailInvoice.Setup.Response) {
        switch response.invoice {
        case .none(let message): output.show(type: .error(message: message))
        case .value(let invoice): passInitialSetup(from: invoice)
        }
    }
    
    func passInitialSetup(from invoice: SyncConvertedInvoiceResponse) {
        let invoiceDate = DateFormatters.mdytaFormatter.string(from: invoice.invoiceDateMobile ?? Date())
        let dueDate = DateFormatters.mdytaFormatter.string(from: invoice.dueDate ?? Date())
        let supplierName = AppSettings.shared.config.supplierName(for: invoice.supplierId)
        let categoryName = AppSettings.shared.config.categoryName(for: invoice.categoryId)
        let paymentMethod = AppSettings.shared.config.paymentName(for: invoice.paymentMethodId)
        let taxPercentage = AppSettings.shared.config.taxName(for: invoice.taxPercentage)
        
        guard var imageURL = URL(string: API.documentsURL) else { output.show(type: .error(message: "Can't load the image")); return }
        imageURL.appendPathComponent(invoice.filePath)
        imageURL.appendPathComponent(invoice.fileName)
        
        let type: DetailInvoice.Setup.InvoiceType
        /// If pdf
        if invoice.fileName.lowercased().contains(".pdf") {
            type = .pdf(URLRequest(url: imageURL))
        }
        else { /// If image: png, jpeg, jpg etc
            type = .image(ImageResource(downloadURL: imageURL))
        }
        
        let viewModel = DetailInvoice.Setup.ViewModel(type: type,
                                                      supplierName: supplierName,
                                                      invoiceDate: invoiceDate,
                                                      invoiceNumber: invoice.invoiceNumber,
                                                      paymentMethod: paymentMethod,
                                                      category: categoryName,
                                                      taxRate: taxPercentage,
                                                      taxAmount: invoice.taxAmount,
                                                      grossAmount: invoice.grossAmount,
                                                      netAmount: invoice.netAmount,
                                                      dueDate: dueDate,
                                                      dueDateMin: invoice.invoiceDateMobile ?? Date())
        
        output.displayInitial(viewModel: viewModel)
    }
    
    func presentSave(response: DetailInvoice.Save.Response) {
        output.stopSpinning()
        
        switch response.data {
        case .none(let message): output.show(type: .error(message: message))
        case .value: output.show(type: .success(message: "Saved"))
        }
    }
    
    func presentReject(response: DetailInvoice.Reject.Response) {
        output.stopSpinning()
        
        switch response.data {
        case .none(let message): output.show(type: .error(message: message))
        case .value: output.show(type: .success(message: "Rejected"))
        }
    }
}
