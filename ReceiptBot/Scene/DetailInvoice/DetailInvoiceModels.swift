//
//  DetailInvoiceModels.swift
//  ReceiptBot
//
//  Created by Haik Ampardjian on 4/13/17.
//  Copyright (c) 2017 receiptbot. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import Kingfisher

struct DetailInvoice {
    struct Setup {
        struct Response {
            let invoice: RebotValueWrapper<SyncConvertedInvoiceResponse>
            
            init (with invoice: SyncConvertedInvoiceResponse?) {
                if let unwrappedInvoice = invoice { self.invoice = .value(unwrappedInvoice) }
                else { self.invoice = .none(message: "No original invoice") }
            }
        }
        
        enum InvoiceType {
            case pdf(URLRequest)
            case image(ImageResource)
        }
        
        struct ViewModel {
            let type: InvoiceType
            let supplierName: String
            let invoiceDate: String
            let invoiceNumber: String
            let paymentMethod: String
            let category: String
            let taxRate: String
            let taxAmount: String
            let grossAmount: String
            let netAmount: String
            let dueDate: String
            let dueDateMin: Date /// set min date for dueDate picker
        }
    }
    
    struct Reject {
        struct Params {
            let comment: String
            let entityId: Int
            let invoiceId: String
            let originalInvoiceId: String
        }
        
        struct Request {
            let comment: String
        }
        
        struct Response {
            let data: RebotValueWrapper<SyncConvertedInvoiceResponse>
        }
    }
    
    struct Save {
        struct Request {
            let supplierName: String?
            let invoiceDate: String?
            let invoiceNumber: String?
            let paymentMethod: String?
            let category: String?
            let taxRate: String?
            let taxAmount: String?
            let netAmount: String?
            let grossAmount: String?
            let dueDate: String?
        }
        
        struct Response {
            let data: RebotValueWrapper<SyncConvertedInvoiceResponse>
        }
        
        struct Params {
            let currencyId: String = "1" /// TODO: i don't know what to do with this
            let status: String
            let convertedInvoiceId: String
            let dueDate: String
            let entityId: String
            let fileName: String
            let grossNumber: String
            let invoiceNumber: String
            let invoicedateMobile: String
            let netAmount: String
            let originalInvoiceId: String
            let originalFileName: String
            let supplierName: String
            let taxAmount: String
            let taxPercentage: Int
            let paymentMethod: String
            let categoryId: String
            
            var params: [String : Any] {
                return [
                    "ConvertedInvoiceId": convertedInvoiceId,
                    "Type": status,
                    "CurrencyId": currencyId,
                    "DueDate": dueDate,
                    "EntityId": entityId,
                    "File_Name": fileName,
                    "Gross_Amount": grossNumber,
                    "InvoiceNumber": invoiceNumber,
                    "InvoicedateMobile": invoicedateMobile,
                    "NetAmount": netAmount,
                    "OrgInvoiceId": originalInvoiceId,
                    "OriginalFileName": originalFileName,
                    "SupplierName": supplierName,
                    "TaxAmount": taxAmount,
                    "TaxPercentage": taxPercentage,
                    "PaymentMethod": paymentMethod,
                    "CategoryId": categoryId
                ]
            }
        }
    }
}
